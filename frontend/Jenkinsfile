def component = [
     'front': true,
     'back': false,
     'nginx': false,
     'redis': false
]
pipeline {
    agent any
    environment {
        REPO = "s10-webmobile1-sub2/S10P12C107"
    }
    stages {
        stage("Checkout") {
            steps {
                checkout scm
            }
        }
        stage('Move .env File') {
            steps {
                // Git Submodule 내부의 .env 파일을 현재 작업 디렉토리로 이동
                sh 'cp secure-settings/.env .env'
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "ls -al"
                    component.each { entry ->
                        if (entry.value) {
                            sh "docker compose -p test-server build ${entry.key.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage("Login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    component.each{ entry ->
                        if(entry.value){
                            def var = entry.key
                            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                                sh "docker push ${DOCKER_USER_ID}/toritest-${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker image prune --filter until=1h"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    component.each{entry ->
                        if(entry.value&&entry.key!="redis"){
                            def var = entry.key
                            sh "docker compose -p test-server pull ${var.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    component.each{ entry ->
                        if(entry.value){
                            def var = entry.key
                            try {
                                sh "docker compose -p test-server up -d ${var.toLowerCase()}"
                            } catch (Exception e) {
                                // 'docker compose up -d' 명령이 실패한 경우
                                echo "Failed to up. Starting 'docker compose start'..."
                                sh "docker compose -p test-server restart ${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
    }
}
