def component = [
     'front': true,
     'back': false,
     'nginx': false,
     'redis': false
]
pipeline {
    agent any
    environment {
        REPO = "s10-webmobile1-sub2/S10P12C107"
    }
    stages {
        stage("Checkout") {
            steps {
                checkout scm
            }
        }
        stage("Build") {
            steps {
                script {
                    component.each { entry ->
                        stage("${entry.key} Push") {
                            def var = entry.key
                            if (entry.value) {
                                sh "docker compose build ${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    component.each { entry ->
                        stage("${entry.key} Push") {
                            if (entry.value) {
                                def var = entry.key
                                withCredentials([[$class          : 'UsernamePasswordMultiBinding',
                                                  credentialsId   : 'Docker-hub',
                                                  usernameVariable: 'DOCKER_USER_ID',
                                                  passwordVariable: 'DOCKER_USER_PASSWORD'
                                                 ]]) {
                                    sh "docker login -u ${DOCKER_USER_ID} -p ${DOCKER_USER_PASSWORD}"
                                    sh "docker push ${DOCKER_USER_ID}/toritest-${var.toLowerCase()}"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Prune old images') {
            steps {
                script {
                    sh "docker image prune --filter until=1h"
                }
            }
        }
        stage('Pull and Up') {
            steps {
                script {
                    component.each { entry ->
                        stage("${entry.key} Push") {
                            if (entry.value) {
                                def var = entry.key
                                try {
                                    sh "docker compose pull "
                                    sh "docker compose up -d ${var.toLowerCase()}"
                                } catch (Exception e) {
                                    // 'docker compose up -d' 명령이 실패한 경우
                                    echo "Failed to up. Starting 'docker compose start'..."
                                    sh "docker compose restart ${var.toLowerCase()}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
