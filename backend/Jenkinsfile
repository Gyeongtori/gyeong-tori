def component = [
        front: false,
        back: true,
        nginx: true,
        redis: true
]
pipeline {
    agent any
    environment {
        REPO = "s10-webmobile1-sub2/S10P12C107"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                        branches: [[name: 'develop-be']],
                        extensions: [submodule(parentCredentials: true, trackingSubmodules: true)],
                        userRemoteConfigs: [[credentialsId: 'Github-access-token', url: 'https://github.com/KimDahui42/jackpot-settings']]
                )
            }
        }
        stage('Move .env File') {
            steps {
                sh "ls backend/secure-settings"
                // Git Submodule 내부의 .env 파일을 현재 작업 디렉토리로 이동
                sh 'cp backend/secure-settings/.env .env'
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/backend"){
                    sh "ls . -al"
                    sh "chmod +x gradlew"
                    script {
                        def version_value = sh(returnStdout: true, script: "gradlew properties -q | grep 'version:'").trim()
                        version = version_value.split(/:/)[1].trim()
                        env.TAG = version
                    }
                    //이 명령은 현재 작업 디렉토리에 .env 파일을 생성하고, 그 파일 안에 TAG라는 이름의 변수와 그 값을 씀.
                    //docker에 동적으로 tag를 지정하기 위해 사용했다.
                    sh "echo TAG=$version >> .env"
                    sh "cat .env"
                }
            }
        }
//		stage('Junit Test') {
//			steps {
//				sh "./gradlew test"
//			}
//		}
        stage("Build") {
            steps {
                script {
                    component.each { entry ->
                        if (entry.value) {
                            sh "docker compose build ${entry.key.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    component.each{ entry ->
                        if(entry.value){
                            def var = entry.key
                            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                                              credentialsId: 'Docker-hub',
                                              usernameVariable: 'DOCKER_USER_ID',
                                              passwordVariable: 'DOCKER_USER_PASSWORD'
                                             ]]){
                                sh "docker login -u ${DOCKER_USER_ID} -p ${DOCKER_USER_PASSWORD}"
                                sh "docker push ${DOCKER_USER_ID}/toritest-${var.toLowerCase()}:${env.TAG}"
                            }
                        }
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker image prune --filter until=1h"
                }
            }
        }
        stage('Pull and Up') {
            steps {
                script {
                    component.each{ entry ->
                        if(entry.value){
                            def var = entry.key
                            try {
                                sh "docker compose pull "
                                sh "docker compose up -d ${var.toLowerCase()}"
                            } catch (Exception e) {
                                // 'docker compose up -d' 명령이 실패한 경우
                                echo "Failed to up. Starting 'docker compose start'..."
                                sh "docker compose restart ${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
    }
}
