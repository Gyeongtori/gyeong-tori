def component = [
        front: false,
        back: true,
        nginx: true,
        redis: true
]
pipeline {
    agent any
    environment {
        REPO = "s10-webmobile1-sub2/S10P12C107"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                        branches: [[name: 'develop-be']],
                        extensions: [submodule(parentCredentials: true, trackingSubmodules: true)],
                        userRemoteConfigs: [[credentialsId: 'Github-access-token', url: 'https://github.com/KimDahui42/jackpot-settings']]
                )
            }
        }
        stage('Move .env File') {
            steps {
                sh "ls backend/secure-settings"
                // Git Submodule 내부의 .env 파일을 현재 작업 디렉토리로 이동
                sh 'cp backend/secure-settings/back/.env .env'
            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/backend"){
                    script {
                        sh "ls . -al"
                        sh "chmod +x ./gradlew"
                        def version_value = sh(returnStdout: true, script: "./gradlew properties -q | grep 'version:'").trim()
                        version = version_value.split(/:/)[1].trim()
                        env.TAG = version
                        //이 명령은 현재 작업 디렉토리에 .env 파일을 생성하고, 그 파일 안에 TAG라는 이름의 변수와 그 값을 씀.
                        //docker에 동적으로 tag를 지정하기 위해 사용했다.
                        sh "echo TAG=$version >> .env"
                        sh "cat .env"
                    }
                }
            }
        }
//		stage('Junit Test') {
//			steps {
//				sh "./gradlew test"
//			}
//		}
        stage("Build") {
            steps {
                script {
                    sh "ls -al"
                    component.each { entry ->
                        if (entry.value) {
                            sh "docker compose -p test-server build ${entry.key.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage("Login") {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                    sh """
                        set +x
                        echo $DOCKER_USER_PASSWORD | docker login -u $DOCKER_USER_ID --password-stdin
                        set -x
                    """
                }
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    component.each{ entry ->
                        if(entry.value&&entry.key!="redis"){
                            def var = entry.key
                            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                                sh "docker push ${DOCKER_USER_ID}/toritest-${var.toLowerCase()}:${env.TAG}"
                            }
                        }
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker image prune --filter until=1h"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    component.each{entry ->
                        if(entry.value&&entry.key!="redis"){
                            def var = entry.key
                            sh "docker compose -p test-server pull ${var.toLowerCase()}"
                        }
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    component.each{ entry ->
                        if(entry.value){
                            def var = entry.key
                            try {
                                sh "docker compose -p test-server up -d ${var.toLowerCase()}"
                            } catch (Exception e) {
                                // 'docker compose up -d' 명령이 실패한 경우
                                echo "Failed to up. Starting 'docker compose start'..."
                                sh "docker compose -p test-server restart ${var.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good',
                        message: "빌드 ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                        endpoint: 'https://meeting.ssafy.com/hooks/q4qjarpscbf9pme4f46yiojzfe',
                        channel: 'C107-Jenkins'
                )
            }
        }
    }
}
