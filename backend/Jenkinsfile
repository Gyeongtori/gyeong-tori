def component = [
        app: true,
        nginx: true,
        redis: true
]
pipeline {
    agent any
    environment {
        REPO = "honam-hyanguhoe/duty-app-be"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                        branches: [[name: 'main']],
                        extensions: [submodule(parentCredentials: true, trackingSubmodules: true)],
                        userRemoteConfigs: [[credentialsId: 'github-access-token', url: 'https://github.com/honam-hyanguhoe/duty-app-be']]
                )
            }
        }
        stage('Move .env File') {
            steps {
                // Git Submodule 내부의 .env 파일을 현재 작업 디렉토리로 이동
                sh 'cp secure-settings/.env .env'
            }
        }
        stage('Setup Environment') {
            steps {
                script {
                    sh "chmod +x gradlew"
                    sh ""
                    def version_value = sh(returnStdout: true, script: "./gradlew properties -q | grep 'version:'").trim()
                    version = version_value.split(/:/)[1].trim()
                    //Jenkins 파이프라인의 환경 변수 TAG
                    env.TAG = version
                    //이 명령은 현재 작업 디렉토리에 .env 파일을 생성하고, 그 파일 안에 TAG라는 이름의 변수와 그 값을 씀.
                    //docker에 동적으로 tag를 지정하기 위해 사용했다.
                    sh "echo TAG=$version >> .env"
                    sh "cat .env"
                }
            }
        }
//		stage('Junit Test') {
//			steps {
//				sh "./gradlew test"
//			}
//		}
        stage("Build") {
            steps {
                sh "docker compose build"
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    component.each{ entry ->
                        stage ("${entry.key} Push"){
                            if(entry.value){
                                var = entry.key
                                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                                                  credentialsId: 'docker-hub',
                                                  usernameVariable: 'DOCKER_USER_ID',
                                                  passwordVariable: 'DOCKER_USER_PASSWORD'
                                                 ]]){
                                    sh "docker login -u ${DOCKER_USER_ID} -p ${DOCKER_USER_PASSWORD}"
                                    sh "docker push ${DOCKER_USER_ID}/nursetest-${var.toLowerCase()}:${env.TAG}"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Pull and Up') {
            steps {
                script {
                    sh "docker image prune --filter until=1h"
                    try {
                        sh "docker compose pull"
                        sh "docker compose up -d"
                    } catch (Exception e) {
                        // 'docker compose up -d' 명령이 실패한 경우
                        echo "Failed to up. Starting 'docker compose start'..."
                        sh "docker compose restart"
                    }
                }
            }
        }
        stage('Release') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                                  credentialsId: 'github-access-token',
                                  usernameVariable: 'GITHUB_USER_ID',
                                  passwordVariable: 'GITHUB_USER_PASSWORD'
                                 ]]) {
                    sh '''#!/bin/bash
								set -x
								echo "REPO=$REPO"
								LAST_LOG=$(git log --format='%H' --max-count=1 origin/main)
								echo "LAST_LOG:$LAST_LOG"
								LAST_MERGE=$(git log --format='%H' --merges --max-count=1 origin/main)
								echo "LAST_MERGE:$LAST_MERGE"
								LAST_MSG=$(git log --format='%s' --max-count=1 origin/main)
								echo "LAST_MSG:$LAST_MSG"
								VERSION=$(echo $LAST_MSG | grep --only-matching 'v\\?[0-9]\\+\\.[0-9]\\+\\(\\.[0-9]\\+\\)\\?')
								echo "VERSION:$VERSION"
								
								if [[ -n $VERSION ]]
									then
										DATA='{
											"tag_name": "'$VERSION'",
											"target_commitish": "main",
											"name": "'$VERSION'",
											"body": "'$LAST_MSG'",
											"draft": false,
											"prerelease": false
										}'
										curl -v -L \
										  -X POST \
										  -H "Accept: application/vnd.github+json" \
										  -H "Authorization: Bearer $GITHUB_USER_PASSWORD" \
										  -H "X-GitHub-Api-Version: 2022-11-28" \
										  "https://api.github.com/repos/$REPO/releases" \
										  -d "$DATA"
								fi
							'''
                }
            }
        }
    }
}
